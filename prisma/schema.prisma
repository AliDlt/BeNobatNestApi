// schema.prisma

// Define the datasource for PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generate the Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Define enums for appointment status, payment status, payment method, and user roles
enum AppointmentStatus {
  completed
  canceled
  notCompleted
}

enum PaymentStatus {
  pending
  paid
}

enum PaymentMethod {
  creditCard
  cardToCard
  cash
}

enum Role {
  User
  Expert
  Admin
}

// Define the Appointment model
model Appointment {
  id                Int                 @id @default(autoincrement())
  dateTime          DateTime            @default(now())
  appointmentStatus AppointmentStatus   @default(notCompleted)
  expert            Expert?             @relation(fields: [expertId], references: [id])
  expertId          Int?
  user              User?               @relation(fields: [userId], references: [id])
  userId            Int?
  paymentInfo       PaymentInformation? @relation(fields: [paymentInfoId], references: [id])
  paymentInfoId     Int?
  note              String?
  imageNames        String[]
  serviceName       String?
}

// Define the Business model
model Business {
  id             Int    @id @default(autoincrement())
  businessName   String @default("نام مرکز شما")
  primaryColor   String @default("#2AA7FF")
  secondaryColor String @default("#4B73B8")
  tertiaryColor  String @default("#515151")
  slogan         String @default("شعار شما")
  logo           String @default("logo.webp")
  logoAltText    String @default("Default Logo Image")
  headerImage    String @default("doc.png")
  headerAltText  String @default("Default Header Image")
  aboutText      String @default("درباره ما")
  aboutImage     String @default("about.jpg")
  phoneNumber    String @default("0900000000")
  landlineNumber String @default("021000000")
  faxNumber      String @default("021000000")
  email          String @default("email@email.com")
  googleMap      String @default("https://maps.app.goo.gl/MrRj36G63HwULUNu7")
  location       String @default("تهران، ستارخان")
  hoursOfWork    String @default("2 تا 6")
}

model Expertise {
  id       Int      @id @default(autoincrement())
  category String
  icon     String
  link     String
  count    String
  experts  Expert[] @relation("ExpertiseExperts")
}

model Expert {
  id           Int           @id @default(autoincrement())
  expertise    Expertise[]   @relation("ExpertiseExperts")
  resume       String
  rate         Float?
  price        Float?
  percent      Float?
  time         Int?
  profile      String?
  name         String
  appointments Appointment[]
  services     Service[]     @relation("ExpertServices") // This line indicates the relation name
}

model Service {
  id          Int                 @id @default(autoincrement())
  serviceName String
  description String?
  cost        Float
  expert      Expert?             @relation("ExpertServices", fields: [expertId], references: [id]) // This line indicates the relation name
  expertId    Int?
  recurring   RecurringSchedule[]
  dates       DateSchedule[]
  imageName   String?
}

// Define the PaymentInformation model
model PaymentInformation {
  id            Int            @id @default(autoincrement())
  paymentStatus PaymentStatus  @default(pending)
  paymentMethod PaymentMethod?
  user          User?          @relation(fields: [userId], references: [id])
  userId        Int?
  appointments  Appointment[]
  dateTime      DateTime       @default(now())
}

// Define the RecurringSchedule model
model RecurringSchedule {
  id        Int     @id @default(autoincrement())
  dayOfWeek String // Enum could be created for days if needed
  startTime String
  endTime   String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int
}

// Define the DateSchedule model
model DateSchedule {
  id        Int      @id @default(autoincrement())
  date      DateTime
  startTime String
  endTime   String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId Int
}

// Define the User model
model User {
  id                   Int                  @id @default(autoincrement())
  fullName             String
  username             String               @unique
  phoneNumber          String               @unique
  password             String
  nationalCode         String?
  passwordResetVersion Int                  @default(0)
  active               Boolean              @default(false)
  role                 Role
  appointments         Appointment[]
  payments             PaymentInformation[]
}
